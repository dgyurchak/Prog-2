using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PrintExample
{
   public class Program
    {

        public static bool isPrime(int n)
        {
            if(n < 2)
            {
                return false;
            }
            for (int i = 2; i < n; i++)
            {
                if(n % i == 0)
                {
                    return false;
                }
            }
            return true;
        }
        static void Main(string[] args)
        {
        }

        public static int[] JumpingNumberOne(int[] input)
        {
            int[] result = new int[input.Length];
            for(int i = 0; i < input.Length; i++)
            {
                if(input[i] == i && input[i + 2] == 0)
                {
                    result[i] = 0;
                }
            }
        }
    }
}


//Teszteles

using Microsoft.VisualStudio.TestTools.UnitTesting;
using PrintExample;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace PrintExample.Tests
{
    [TestClass()]
    public class ProgramTests
    {
        [TestMethod()]
        [Timeout(2000)]  //idokorlat (ms) ha ennyi ido alatt lefut a teszt akkor siker
        public void isPrimeTest()
        {
            Thread.Sleep(2500);
            // Arrange (Elokeszites)
            int number = 11;
            bool expected = true;

            // Act (Vegrehajtas)
            //Program prim = new Program();
            bool result = Program.isPrime(number);
            //Assert (Ellenorzes)
            Assert.IsTrue(result);
        }

        [TestMethod()]
        public void isPrimeTest1()
        {
            // Arrange (Elokeszites)
            int number = 11;
            bool expected = true;

            // Act (Vegrehajtas)
            //Program prim = new Program();
            bool result = Program.isPrime(number);
            //Assert (Ellenorzes)
            Assert.IsTrue(result);
        }

        [TestMethod()]
        public void isPrimeTest2()
        {
            // Arrange (Elokeszites)
            int number = 11;
            bool expected = true;

            // Act (Vegrehajtas)
            //Program prim = new Program();
            bool result = Program.isPrime(number);
            //Assert (Ellenorzes)
            Assert.IsTrue(result);
        }
      
        [DataRow(1, true)]
        [DataRow(2, true)]
        [DataRow(3, true)]
        [DataRow(4, false)]
        [DataRow(5, true)]
        [DataRow(6, false)]
        [DataRow(7, true)]
        [DataRow(8, false)]
        [DataRow(9, false)]
        [DataRow(10, false)]
        [DataRow(11, true)]
        [DataTestMethod]

        [TestMethod()]
        public void CalculatedMethod(int n)
        {
            //Arrange
            bool expected = true;
            for(int i = 2; i * i < n; ++i)
            {
                if (n % i == 0)
                {
                    expected = false;
                }
            }
            //Act
            bool result = Program.isPrime(n);

            //Assert
            Assert.AreEqual(expected, result);
        }

        [TestMethod()]
        public void CalculatedTestMethod(int n, bool expected)
        {
            //Arrange
           
            //Act
            bool result = Program.isPrime(n);

            //Assert
            Assert.AreEqual(expected, result);
        }

        public TestContext TestContext { get; set; }

        [TestMethod]
        [DataSource("Microsoft.VidualStudio.TestTools.DataSource.CSV",
            @"data\primetests.csv",
            "frogs#csv",    //fajlnev
            DataAccessMethod.Sequential)]  
        public void TestFrogWithCsvfile()
        {
            string expectedlString = TestContext.DataRow["original"].ToString();
            int[] expected = new int[resultString.length];
            for(int i = 0; i < expected.Length; i++)
            {
                switch (originalString[i])
                {
                    case 'X':
                        expected[i] = 2;
                        break
                }
            }
        }


        public void TestWithMethod(int n, bool expected)
        {
            //arrange
            int n = Convert.ToInt32(TestContext.DataRow["result"].ToString());
            //Act
            bool result = Program.isPrime(n);
            //assert
            Assert.AreEqual(expected, result);
        }

        //bekas feladathoz pelda teszteles

        [DataRow(new int[] { 1, 2, 0, 1, 2 }, new int[] { 0, 2, 1, 1, 2 })]
        [DataTestMethod]
        [Timeout(2000)]
        public void TestWithArrays(int[] input, int[] expected)
        {
            //arrange
            //act
            int[] result = Program.JumpingNumberOne(input);
            //assert
            for(int i = 0; i < expected.Length; i++)
            {
                Assert.AreEqual(expected[i], result[i]);
            }

        }

    }
