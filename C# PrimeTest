using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PrintExample
{
   public class Program
    {

        public static bool isPrime(int n)
        {
            if(n < 2)
            {
                return false;
            }
            for (int i = 2; i < n; i++)
            {
                if(n % i == 0)
                {
                    return false;
                }
            }
            return true;
        }
        static void Main(string[] args)
        {
        }
    }
}

//Teszteles

using Microsoft.VisualStudio.TestTools.UnitTesting;
using PrintExample;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PrintExample.Tests
{
    [TestClass()]
    public class ProgramTests
    {
        [TestMethod()]
        public void isPrimeTest()
        {
            // Arrange (Elokeszites)
            int number = 11;
            bool expected = true;

            // Act (Vegrehajtas)
            //Program prim = new Program();
            bool result = Program.isPrime(number);
            //Assert (Ellenorzes)
            Assert.IsTrue(result);
        }

        [TestMethod()]
        public void isPrimeTest1()
        {
            // Arrange (Elokeszites)
            int number = 11;
            bool expected = true;

            // Act (Vegrehajtas)
            //Program prim = new Program();
            bool result = Program.isPrime(number);
            //Assert (Ellenorzes)
            Assert.IsTrue(result);
        }

        [TestMethod()]
        public void isPrimeTest2()
        {
            // Arrange (Elokeszites)
            int number = 11;
            bool expected = true;

            // Act (Vegrehajtas)
            //Program prim = new Program();
            bool result = Program.isPrime(number);
            //Assert (Ellenorzes)
            Assert.IsTrue(result);
        }
      
        [DataRow(1, true)]
        [DataRow(2, true)]
        [DataRow(3, true)]
        [DataRow(4, false)]
        [DataRow(5, true)]
        [DataRow(6, false)]
        [DataRow(7, true)]
        [DataRow(8, false)]
        [DataRow(9, false)]
        [DataRow(10, false)]
        [DataRow(11, true)]
        [DataTestMethod]

        [TestMethod()]
        public void CalculatedMethod(int n)
        {
            //Arrange
            bool expected = true;
            for(int i = 2; i * i < n; ++i)
            {
                if (n % i == 0)
                {
                    expected = false;
                }
            }
            //Act
            bool result = Program.isPrime(n);

            //Assert
            Assert.AreEqual(expected, result);
        }

        [TestMethod()]
        public void CalculatedTestMethod(int n, bool expected)
        {
            //Arrange
           
            //Act
            bool result = Program.isPrime(n);

            //Assert
            Assert.AreEqual(expected, result);
        }

        public TestContext TC { get; set; }


    }
}
