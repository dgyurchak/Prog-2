import java.util.Scanner;

public class Kalkulator {
  public boolean isPrime(int n){
        for(int i = 2; i < n; i++){
            if(n % i == 0){
                return false;
            }
        }
        return true;
    }

    public static int add(int a, int b){
      return a + b;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Kalkulator calc = new Kalkulator();
        while(sc.hasNextInt()){
            int n = sc.nextInt();
            if(n == 0){
                break;
            }
            System.out.println(n);
            if(calc.isPrime(n)){
                System.out.println("Prim");
            }else System.out.println("Nem Prim");
        }
    }

}


import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.ValueSource;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;

class KalkulatorTest {

    @Test
    void isPrime() {
        // arrange
        Kalkulator calc = new Kalkulator();
        int num = 11;
        boolean expected = true;
        // act
        boolean actual = calc.isPrime(num);
        // assert
        assertEquals(expected, actual);
    }

    @Test
    void testAdd() {
        //Kalkulator plus = new Kalkulator();
        int a = 4;
        int b = 5;
        int expected = a + b + 1;

        int actual = Kalkulator.add(a, b);

        assertEquals(expected, actual);

    }

    @ParameterizedTest
    @ValueSource(ints = {9, 4, 6, 10, 3, 2, 7, 8, 1, 5})
    void isPrime(int n){
        // arrange
        Kalkulator calc = new Kalkulator();
        boolean expected = true;
        for(int i = 2; i*i <= n; ++i){
            if(n % i == 0){
                expected = false;
            }
        }
        // act
        boolean actual = calc.isPrime(n);
        // assert
        assertEquals(expected, actual);
    }

    @ParameterizedTest
    @MethodSource
    void add(int a, int b, int expected){
        //arrande
        //act/
        int actual = Kalkulator.add(a, b);

        assertEquals(expected, actual);
    }

    static Stream<Arguments> add() {
        return Stream.of(
                Arguments.arguments(4,5,9),
                Arguments.arguments(7, 3, 10),
                Arguments.arguments(2, 9, 11),
                Arguments.arguments(4, -9, -5),
                Arguments.arguments(3, -7, -4)
        );
    }

}
